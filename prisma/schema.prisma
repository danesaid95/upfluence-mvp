// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BRAND
  INFLUENCER
  ADMIN
}

enum PlanType {
  FREE
  PRO
  AGENCY
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
}

enum SocialPlatform {
  INSTAGRAM
  YOUTUBE
  TIKTOK
  TWITTER
  FACEBOOK
  LINKEDIN
  TWITCH
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELED
}

enum MessageStatus {
  SENT
  READ
  REPLIED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  role      UserRole @default(BRAND)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Brand specific fields
  company     String?
  website     String?
  description String?

  // Subscription
  subscription Subscription?

  // Relations
  influencerProfile InfluencerProfile?
  campaigns         Campaign[]
  messages          Message[]         @relation("MessageSender")
  receivedMessages  Message[]         @relation("MessageReceiver")
  bookings          Booking[]

  @@map("users")
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String             @unique
  planType          PlanType           @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  stripeCustomerId  String?            @unique
  stripePriceId     String?
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model InfluencerProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  bio              String?
  location         String?
  category         String[] // Fashion, Tech, Food, etc.
  languages        String[] // English, Spanish, etc.
  rate             Float?   // Rate per post in USD
  isVerified       Boolean  @default(false)
  isAvailable      Boolean  @default(true)
  profileCompleted Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialProfiles SocialProfile[]
  campaignApplicants CampaignInfluencer[]
  bookings      Booking[]

  @@map("influencer_profiles")
}

model SocialProfile {
  id               String        @id @default(cuid())
  influencerId     String
  platform         SocialPlatform
  username         String
  url              String
  followersCount   Int           @default(0)
  engagementRate   Float         @default(0.0)
  avgLikes         Int           @default(0)
  avgComments      Int           @default(0)
  isVerified       Boolean       @default(false)
  lastUpdated      DateTime      @default(now())
  createdAt        DateTime      @default(now())

  influencer InfluencerProfile @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([influencerId, platform])
  @@map("social_profiles")
}

model Campaign {
  id          String         @id @default(cuid())
  brandId     String
  title       String
  description String
  category    String[]
  budget      Float?
  requirements String?
  platforms   SocialPlatform[]
  minFollowers Int           @default(0)
  maxFollowers Int?
  targetAge   String?       // "18-24", "25-34", etc.
  targetGender String?      // "Male", "Female", "All"
  targetLocation String[]   // Countries/Cities
  status      CampaignStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  brand       User                 @relation(fields: [brandId], references: [id], onDelete: Cascade)
  applicants  CampaignInfluencer[]
  messages    Message[]

  @@map("campaigns")
}

model CampaignInfluencer {
  id           String   @id @default(cuid())
  campaignId   String
  influencerId String
  appliedAt    DateTime @default(now())
  isAccepted   Boolean? // null = pending, true = accepted, false = rejected
  message      String?

  campaign   Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencer InfluencerProfile @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([campaignId, influencerId])
  @@map("campaign_influencers")
}

model Message {
  id         String        @id @default(cuid())
  senderId   String
  receiverId String
  campaignId String?
  subject    String?
  content    String
  status     MessageStatus @default(SENT)
  createdAt  DateTime      @default(now())

  sender   User      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User      @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  campaign Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  @@map("messages")
}

model Booking {
  id           String   @id @default(cuid())
  brandId      String
  influencerId String
  campaignId   String?
  amount       Float
  description  String?
  status       String   @default("pending") // pending, confirmed, completed, canceled
  scheduledFor DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  brand     User              @relation(fields: [brandId], references: [id], onDelete: Cascade)
  influencer InfluencerProfile @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Analytics {
  id                String   @id @default(cuid())
  userId            String
  totalViews        Int      @default(0)
  totalProfileViews Int      @default(0)
  totalContacts     Int      @default(0)
  date              DateTime @default(now())

  @@unique([userId, date])
  @@map("analytics")
}